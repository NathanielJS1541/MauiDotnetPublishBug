name: CI Build

# Configure the triggers for the workflow.
on:
  # Automatically run when code or workflow changes are pushed to main.
  push:
    branches: [ main ]
    paths:
      - "src/"               # Run the workflow if the src is updated.
      - ".github/workflows/" # Run the workflow if it is updated.
      - "!**/*.md"           # Do not run the workflow for updated docs.
      - "!**/*.gitignore"    # Do not run the workflow for updated .gitignore.
  # Automatically run the workflow when a PR is opened targeting main.
  pull_request:
    branches: [ main ]
  # Allow the workflow to be run manually.
  workflow_dispatch:

# Set the level of access of the GitHub API token for this workflow.
permissions:
  contents: read # Allow the workflow to read the repo contents.

# Define environmental variables.
env:
  DOTNET_NOLOGO: true     # Disable the .NET CLI banner to reduce output noise.
  DOTNET_VERSION: "9.0.x" # Use the latest .NET Core 9 version.
  XCODE_VERSION: "16.3"   # Xcode 16.3 is required for Microsoft.iOS 18.4.9288.

# Define jobs for the workflow.
jobs:
  config:
    runs-on: ubuntu-latest
    name: Workflow Configuration

    outputs:
      versionNumber: ${{ steps.get_version.outputs.versionNumber }}
      androidFramework: ${{ steps.get_target_frameworks.outputs.androidFramework }}
      iosFramework: ${{ steps.get_target_frameworks.outputs.iosFramework }}

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get App Version
        id: get_version
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "Opening MauiDotnetPublishBug.App.csproj..."
          $string = Get-Content -Path .\src\MauiDotnetPublishBug.App\MauiDotnetPublishBug.App.csproj
          Write-Host "Querying MauiDotnetPublishBug.App.csproj for version..."
          $match = Select-String "<ApplicationDisplayVersion>(\d+)\.(\d+)\.(\d+)" -inputobject $string

          Write-Host "Found the following version:"
          $projectVersionMajor = $match.Matches.groups[1].value
          $projectVersionMinor = $match.Matches.groups[2].value
          $projectVersionBuild = $match.Matches.groups[3].value
          Write-Host "- Major Version:    $projectVersionMajor"
          Write-Host "- Minor Version:    $projectVersionMinor"
          Write-Host "- Build Version:    $projectVersionBuild"

          Write-Host ""
          Write-Host "Finalising version..."
          $version = $projectVersionMajor + "." + $projectVersionMinor + "." + $projectVersionBuild
          Write-Host "- Version is: $version"
          Write-Host ""
          Write-Host "Saving to output..."
          Add-Content -Path $env:GITHUB_OUTPUT -Value "versionNumber=$version"

      - name: Get Target Frameworks
        id: get_target_frameworks
        shell: pwsh
        run: |
          # Load the System.Xml.Linq assembly to parse the .csproj file.
          Add-Type -AssemblyName "System.Xml.Linq"

          # Resolve the absolute path to the app .csproj file.
          $path = (Resolve-Path ".\src\MauiDotnetPublishBug.App\MauiDotnetPublishBug.App.csproj").Path

          # Load the .csproj file as an XDocument.
          $doc = [System.Xml.Linq.XDocument]::Load($path)

          # Get the target frameworks from the .csproj file.
          $targetFrameworks = $doc.
              Element("Project").
              Element("PropertyGroup").
              Element("TargetFrameworks").
              Value

          # Try and get the Android and iOS frameworks from the target
          # frameworks in the .csproj file.
          if ($targetFrameworks -match "(?<framework>net\d\.\d-android)") {
              $androidFramework = $Matches["framework"]
          }
          else {
              # Output an error message displaying the available target
              # frameworks if a matching framework was not found.

              # Convert the list of target frameworks to a bullet point list.
              $frameworksList = ($targetFrameworks -split ";" | ForEach-Object { "• $_" }) -join "`n"

              # Output an error and display all target frameworks.
              Write-Error -Message "Unable to identify Android target framework:`n$frameworksList"
          }
          if ($targetFrameworks -match "(?<framework>net\d\.\d-ios)") {
              $iosFramework = $Matches["framework"]
          }
          else {
              # Output an error message displaying the available target
              # frameworks if a matching framework was not found.

              # Convert the list of target frameworks to a bullet point list.
              $frameworksList = ($targetFrameworks -split ";" | ForEach-Object { "• $_" }) -join "`n"

              # Output an error and display all target frameworks.
              Write-Error -Message "Unable to identify iOS target framework:`n$frameworksList"
          }

          # If the target frameworks were successfully identified, write them
          # to variables to be used in the build step.
          if (-not [string]::IsNullOrEmpty($androidFramework) -and -not [string]::IsNullOrEmpty($androidFramework)) {
            Write-Host ""
            Write-Host "Saving target frameworks to output..."
            Add-Content -Path $env:GITHUB_OUTPUT -Value "androidFramework=$androidFramework"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "iosFramework=$iosFramework"
          }

      - name: Display Workflow Configuration
        id: output_config
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "Current Workflow Configuration:"
          Write-Host ""
          Write-Host "Runner Configuration:"
          Write-Host "Xcode Version: ${{ env.XCODE_VERSION }}"
          Write-Host ""
          Write-Host "Build Configuration:"
          Write-Host "Selected .NET Version: ${{ env.DOTNET_VERSION }}"
          Write-Host "Android TargetFramework: ${{ steps.get_target_frameworks.outputs.androidFramework }}"
          Write-Host "iOS TargetFramework: ${{ steps.get_target_frameworks.outputs.iosFramework }}"
          Write-Host ""
          Write-Host "App Configuration:"
          Write-Host "App Version: ${{ steps.get_version.outputs.versionNumber }}"
          Write-Host "Build Number: ${{ github.run_attempt }}"

  build-android:
    runs-on: macos-15
    name: Android Build
    needs: config # Wait for the workflow configuration to finish.
    env:
      androidFramework: ${{needs.config.outputs.androidFramework}}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: UpdateProjectInfo
        shell: pwsh
        run: |
          # Load the System.Xml.Linq assembly to parse the .csproj file.
          Add-Type -AssemblyName "System.Xml.Linq"

          # Resolve the absolute path to the app .csproj file.
          $path = (Resolve-Path ".\src\MauiDotnetPublishBug.App\MauiDotnetPublishBug.App.csproj").Path

          # Load the .csproj file as an XDocument.
          $doc = [System.Xml.Linq.XDocument]::Load($path)

          # Update the ApplicationVersion element to the current build number.
          $doc.
              Element("Project").
              Element("PropertyGroup").
              Element("ApplicationVersion").
              SetValue("${{ github.run_attempt }}")

          # Create some XmlWriterSettings to prevent trashing the format of the .csproj file.
          $settings = New-Object System.Xml.XmlWriterSettings
          $settings.OmitXmlDeclaration = $true
          $settings.Indent = $true

          # Save the .csproj with the updated build number.
          $writer = [System.Xml.XmlWriter]::Create($path, $settings)
          $doc.Save($writer)
          $writer.Close()

      - name: Install MAUI Workload
        run: |
          dotnet nuget locals all --clear
          dotnet workload install maui android --source https://api.nuget.org/v3/index.json

      - name: Restore Dependencies
        run: dotnet restore src/MauiDotnetPublishBug.sln

      - name: Build MAUI Android
        continue-on-error: true # Continue job even if this step fails to capture binlogs.
        id: build_android
        run: dotnet publish src/MauiDotnetPublishBug.sln -c Release -f ${{ env.androidFramework }} -p:AndroidPackageFormat=aab --no-restore -bl:android-log.binlog

      # Only try and upload build artifacts if the build step succeeded.
      - name: Upload Android Artifact
        if: steps.build_android.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: android-build-artifacts
          path: |
            **/*.aab
            **/*.apk

      # Always upload binlogs if the build step ran.
      #
      # Check conclusion here as build_android.continue-on-error = true, so the
      # conclusion will be 'success' even if the build failed.
      - name: Upload Android Binlogs
        if: steps.build_android.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: android-binlogs
          path: |
            **/*.binlog

  build-ios:
    # macos-15-large would technically be the equivalent to a MS-hosted macos-15
    # runner image on Azure Pipelines, but that isn't available as standard for
    # non-enterprise plans. I'll see what I can do with the arm64 macOS images
    # instead...
    runs-on: macos-15
    name: iOS Build
    needs: config # Wait for the workflow configuration to finish.
    env:
      iosFramework: ${{needs.config.outputs.iosFramework}}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: UpdateProjectInfo
        shell: pwsh
        run: |
          # Load the System.Xml.Linq assembly to parse the .csproj file.
          Add-Type -AssemblyName "System.Xml.Linq"

          # Resolve the absolute path to the app .csproj file.
          $path = (Resolve-Path ".\src\MauiDotnetPublishBug.App\MauiDotnetPublishBug.App.csproj").Path

          # Load the .csproj file as an XDocument.
          $doc = [System.Xml.Linq.XDocument]::Load($path)

          # Update the ApplicationVersion element to the current build number.
          $doc.
              Element("Project").
              Element("PropertyGroup").
              Element("ApplicationVersion").
              SetValue("${{ github.run_attempt }}")

          # Create some XmlWriterSettings to prevent trashing the format of the .csproj file.
          $settings = New-Object System.Xml.XmlWriterSettings
          $settings.OmitXmlDeclaration = $true
          $settings.Indent = $true

          # Save the .csproj with the updated build number.
          $writer = [System.Xml.XmlWriter]::Create($path, $settings)
          $doc.Save($writer)
          $writer.Close()

      - name: Install MAUI Workload
        run: |
          dotnet nuget locals all --clear
          dotnet workload install maui android --source https://api.nuget.org/v3/index.json

      - name: Restore Dependencies
        run: dotnet restore src/MauiDotnetPublishBug.sln

      # In our actual pipeline, we use dotnet publish. However, that requires a
      # provisioning profile and signing certificate which I don't have for this
      # repo. Instead, I've tried to use dotnet build to see if it exhibits the
      # same behaviour.
      - name: Build MAUI iOS
        id: build_ios
        continue-on-error: true # Continue job even if this step fails to capture binlogs.
        run: dotnet build src/MauiDotnetPublishBug.sln -c Release -f ${{ env.iosFramework }} -p:buildForSimulator=true -p:packageApp=true -p:ArchiveOnBuild=false -bl:ios-log.binlog

      # Only try and upload build artifacts if the build step succeeded.
      - name: Upload iOS Artifact
        if: steps.build_ios.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            **/*.app
            **/*.ipa

      # Always upload binlogs if the build step ran.
      #
      # Check conclusion here as build_ios.continue-on-error = true, so the
      # conclusion will be 'success' even if the build failed.
      - name: Upload iOS Binlogs
        if: steps.build_ios.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ios-binlogs
          path: |
            **/*.binlog
